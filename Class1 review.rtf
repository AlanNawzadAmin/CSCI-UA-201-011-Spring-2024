{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Verdana;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww14440\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \'97 Object oriented programming \'97\
\
What is encapsulation?\
What is the principle of least privilege?\
What does the static keyword do?\
What are accessor methods and why would you use them?\
\
\'97 Inheritance \'97\
\
What is overriding? What is overloading?\
Say Square is a subclass of Rectangle. How is the constructor for Rectangle called in the constructor for Square?\
What are two situations in which you need to use the super keyword?\
\
If r1 is a reference variable, how does the compiler determine if I can call r1.method()?\
\
\'97 casting and dynamic binding \'97\
Say Square is a subclass of Rectangle. Say Rectangle has a method RectangleMethod() that is overridden in Square and Square also has a new method SquareMethod().\
Consider the code:\
	Rectangle r1 = new Square();\
Will the following code run?\
	r1.SquareMethod();\
In the following code, which version of RectangleMethod() will run?\
	r1.RectangleMethod();\
\
What does casting do?\
What does instanceof do?\
}